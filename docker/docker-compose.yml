version: '3.8'

services:
  # PostgreSQL + TimescaleDB
  postgres-timescale:
    image: timescale/timescale-db:latest-pg15
    container_name: postgres-timescale
    environment:
      POSTGRES_DB: solana_trading_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - solana-trading-network

  # Rust Trading Engine
  rust-engine:
    build:
      context: ../rust-engine
      dockerfile: Dockerfile
    container_name: rust-trading-engine
    environment:
      - RUST_LOG=info
      - DB_HOST=postgres-timescale
      - DB_PORT=5432
      - DB_NAME=solana_trading_bot
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_SSL=false
    depends_on:
      postgres-timescale:
        condition: service_healthy
    volumes:
      - ../rust-engine:/app
      - rust_cache:/app/target
    networks:
      - solana-trading-network
    restart: unless-stopped

  # TypeScript API Server
  typescript-api:
    build:
      context: ../typescript-api
      dockerfile: Dockerfile
    container_name: typescript-api-server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres-timescale
      - DB_PORT=5432
      - DB_NAME=solana_trading_bot
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_SSL=false
      - PORT=3000
      - WALLET_PRIVATE_KEY=${WALLET_PRIVATE_KEY}
    depends_on:
      postgres-timescale:
        condition: service_healthy
    volumes:
      - ../typescript-api:/app
      - node_modules:/app/node_modules
    networks:
      - solana-trading-network
    restart: unless-stopped

  # React Dashboard
  dashboard:
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    container_name: react-dashboard
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - NODE_ENV=production
    volumes:
      - ../dashboard:/app
      - /app/node_modules
    networks:
      - solana-trading-network
    restart: unless-stopped

  # Prometheus (for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - solana-trading-network

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - solana-trading-network

volumes:
  postgres_data:
  rust_cache:
  node_modules:
  prometheus_data:
  grafana_data:

networks:
  solana-trading-network:
    driver: bridge